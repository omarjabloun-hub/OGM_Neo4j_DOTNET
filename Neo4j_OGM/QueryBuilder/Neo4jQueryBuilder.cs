using System.Reflection;
using Neo4j_OGM.Attributes;
using Neo4j_OGM.Entities;

namespace Neo4j_OGM.QueryBuilder;

public class Neo4jQueryBuilder<T> where T : EntityBase<T>
{
    public Neo4jQueryBuilder()
    {
        DbLabel = typeof(T).GetCustomAttribute<DbLabelNameAttribute>()?.LabelName ?? typeof(T).Name;
        ObjectName = typeof(T).GetCustomAttribute<DbObjectNameAttribute>()?.Name ??
                     char.ToLower(typeof(T).Name[0]) + typeof(T).Name[1..];
    }

    private string DbLabel { get; }
    private string ObjectName { get; }

    public Neo4jQuery BuildGetQuery(bool archived = false)
    {
        var query =
            $"MATCH (n:{DbLabel}) WHERE n.isArchived = $archived RETURN n {{id : Id(n), labels : labels(n) , .* }} AS {ObjectName}";
        return new Neo4jQuery(query, new { archived });
    }

    public Neo4jQuery BuildGetQueryPaginated(int skip, int limit, bool archived = false)
    {
        var query =
            $"MATCH (n:{DbLabel}) WHERE n.isArchived = $archived RETURN n {{id : Id(n), labels : labels(n) , .* }} AS {ObjectName} " +
            $"SKIP {skip} LIMIT {limit}";
        return new Neo4jQuery(query, new { archived, skip, limit });
    }

    public Neo4jQuery BuildGetCountQuery(bool archived = false)
    {
        var query = $"MATCH (n:{DbLabel}) WHERE n.isArchived = $archived RETURN count(n)  AS count ";
        return new Neo4jQuery(query, new { archived });
    }

    public Neo4jQuery BuildGetByIdQuery(long id)
    {
        var query =
            $"MATCH (n:{DbLabel} ) WHERE Id(n) = $id RETURN n {{id : Id(n), labels : labels(n) , .* }} AS  {ObjectName}";
        return new Neo4jQuery(query, new { id });
    }

    public Neo4jQuery BuildCreateQuery(T entity)
    {
        var query = $"CREATE (n:{DbLabel} ) SET";
        var dict = new Dictionary<string, object>();
        foreach (var property in typeof(T).GetProperties())
        {
            var isNested = property.GetCustomAttribute<DbPropertyNameAttribute>()?.IsNested ?? false;
            var isAutoGenerated = property.GetCustomAttribute<DbPropertyNameAttribute>()?.IsAutoGenerated ?? false;
            if (isNested || isAutoGenerated)
                continue;
            var propertyName = property.GetCustomAttribute<DbPropertyNameAttribute>()?.PropertyName
                               ?? char.ToLower(property.Name[0]) + property.Name[1..];
            dict.Add(propertyName, property.GetValue(entity));
            query += $" n.{propertyName} = ${propertyName},";
        }

        query = query[^1] switch
        {
            ',' => query[..^1],
            'T' => query[..^3],
            _ => query
        };


        query += $" RETURN n {{id : Id(n), labels : labels(n) , .* }} AS {ObjectName}";
        return new Neo4jQuery(query, dict);
    }

    public Neo4jQuery BuildArchiveQuery(long id)
    {
        var query =
            $"MATCH (n:{DbLabel}) WHERE Id(n) = $id SET n.isArchived = true  RETURN n {{id : Id(n), labels : labels(n) , .* }} AS {ObjectName} ";
        var dict = new Dictionary<string, object> { { "id", id } };
        return new Neo4jQuery(query, dict);
    }

    public Neo4jQuery BuildRestoreQuery(long id)
    {
        var query =
            $"MATCH (n:{DbLabel}) WHERE Id(n) = $id SET n.isArchived = false  RETURN n {{id : Id(n), labels : labels(n) , .* }} AS {ObjectName} ";
        var dict = new Dictionary<string, object> { { "id", id } };
        return new Neo4jQuery(query, dict);
    }

    public Neo4jQuery BuildUpdateQuery(T entity)
    {
        var query = $"MATCH (n:{DbLabel} ) WHERE Id(n) = $id SET";
        var dict = new Dictionary<string, object> { { "id", entity.Id } };
        foreach (var property in typeof(T).GetProperties())
        {
            var isNested = property.GetCustomAttribute<DbPropertyNameAttribute>()?.IsNested ?? false;
            var isAutoGenerated = property.GetCustomAttribute<DbPropertyNameAttribute>()?.IsAutoGenerated ?? false;
            if (isNested || isAutoGenerated)
                continue;
            var propertyName = property.GetCustomAttribute<DbPropertyNameAttribute>()?.PropertyName
                               ?? char.ToLower(property.Name[0]) + property.Name[1..];
            dict.Add(propertyName, property.GetValue(entity));
            query += $" n.{propertyName} = ${propertyName},";
        }

        query = query[^1] switch
        {
            ',' => query[..^1],
            'T' => query[..^3],
            _ => query
        };

        query += $" RETURN n {{id : Id(n), labels : labels(n) , .* }} AS {ObjectName}";
        return new Neo4jQuery(query, dict);
    }
}